function sheep(ccomponent) {

  let mounted = false;
  let componentDidMount = ccomponent.componentDidMount;

  ccomponent.componentDidMount = ()=> {
    mounted = true;

    if(typeof componentDidMount === "function")
      componentDidMount();

    Object.entries(items).forEach(([, item])=> {
      enabledListeners(item);
      disabledListeners(item);
    })
    
    Object.entries(groups).forEach(([, group])=> {
      Object.entries(group.items).forEach(([, item])=> {
        enabledListeners(item);
        disabledListeners(item);
      })
    })

    ccomponent.setState({});
  }


  let items = {}; 
  let groups = {};
  let model = {
    item: function(key) {
      return {
        key: key,
        state: "disabled",
        enabledListeners: {},
        disabledListeners: {},
        usedInitiallyEnable: false,
      }
    },
    group: function(key) {
      return {
        key: key,
        items: {},
        enabledItem: {},
      }
    }
  }

  function empty(object) {
    return Object.values(object).length === 0;
  }

  function getKeyGroup(key) {
    if(key.indexOf(":") < 0)
      return undefined;
    return key.split(":")[0];
  }

  function getGroup(key) {
    let keyGroup = getKeyGroup(key);
    if(keyGroup === undefined)
      return undefined;
    return groups[keyGroup] || createGroup(keyGroup);
  }

  function createGroup(key) {
    let group = model.group(key);
    return groups[group.key] = group;
  }

  function createItem(key) {
    let group = getGroup(key);
    let item = model.item(key);
    if(group === undefined) 
      return items[item.key] = item;
    return group.items[item.key] = item;
  }

  function getItem(key) {
    let group = getGroup(key);
    if(group === undefined)
      return items[key] || createItem(key);
    return group.items[key] || createItem(key);
  }

  function setItem(key, item) {
    let group = getGroup(key);
    if(group === undefined) 
      return items[item.key] = item;
    return group.items[item.key] = item;
  }

  function enabled(key, initiallyEnable) {
    let item = getItem(key);

    if(initiallyEnable && item.usedInitiallyEnable === false) {
      item.usedInitiallyEnable = true;
      setItem(key,item);
      setTimeout(()=> {
        setEnabled(key)();
      }, 1)
    }

    if(item.state === "enabled")
      return true;
    return false;
  }

  function disabled(key) {
    let item = getItem(key);
    if(item.state === "enabled")
      return false;
    return true;
  }

  function enabledListeners(item) {
    if(item.state === "enabled")
    Object.entries(item.enabledListeners)
    .forEach(([key, callback])=> {
      callback();
    })
  }

  function disabledListeners(item) {
    if(item.state === "disabled")
    Object.entries(item.disabledListeners)
    .forEach(([key, callback])=> {
      callback();
    })
  }

  function onEnabled(key, callback) {
    let item = getItem(key);
    item.enabledListeners[Math.random()] = callback;
    return;
  }

  function onDisabled(key, callback) {
    let item = getItem(key);
    item.disabledListeners[Math.random()] = callback;
    return;
  }

  function setEnabled(key) {
    return function(ev) {
      let group = getGroup(key);
      if(group === undefined) 
        return setEnabledItem(key);
      return setEnabledItemInGroup(key);
    }
  }

  function setEnabledItem(key) {
    let item = getItem(key);

    if(item.state === "enabled")
      return;

    item.state = "enabled";
    setItem(key, item);
    
    if(mounted) {
      enabledListeners(item);
      ccomponent.setState({});
    }
  }

  function setEnabledItemInGroup(key) {
    let group = getGroup(key);
    let item = getItem(key);
    let enabledItem = group.enabledItem;

    if(enabledItem.key === item.key)
      return;

    if(!empty(enabledItem)) {
      enabledItem.state = "disabled";
      setItem(enabledItem.key, enabledItem);
      disabledListeners(enabledItem);
    }

    item.state = "enabled";
    group.enabledItem = item;
    setItem(item.key, item);

    if(mounted) {
      enabledListeners(item);
      ccomponent.setState({});
    }
  }

  function setDisabled(key) {
    return function(ev) {
      let group = getGroup(key);
      if(group === undefined) 
        return setDisabledItem(key);
      return setDisabledItemInGroup(key);
    }
  }

  function setDisabledItem(key) {
    let item = getItem(key);

    if(item.state === "disabled")
      return;

    item.state = "disabled";
    setItem(key, item);

    if(mounted) {
      disabledListeners(item);
      ccomponent.setState({});
    }
  }

  function setDisabledItemInGroup(key) {
    let group = getGroup(key);
    let item = getItem(key);
    let enabledItem = group.enabledItem;

    if(enabledItem.key === item.key) 
      group.enabledItem = {};

    if(item.state === "disabled")
      return;
    
    item.state = "disabled";
    setItem(item.key, item);

    if(mounted) {
      disabledListeners(item);
      ccomponent.setState({});
    }
  }

  function toggleEnabled(key) {
    return function(ev) {
      let item = getItem(key);
      if(item.state === "enabled")
        return setDisabled(key)();
      return setEnabled(key)();
    }
  }

  return {
    enabled,
    disabled,
    onEnabled,
    onDisabled,
    setEnabled,
    setDisabled,
    toggleEnabled
  }
}

module.exports = sheep;
